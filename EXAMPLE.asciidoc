= Twiliofaces
Fiorenzo Pizza<fiorenzo.pizza@gmail.com>
:imagesdir: assets
:homepage: http://twiliofaces.org

== http://twiliofaces.org[Twiliofaces] Come usare Twilio nelle tue applicazione java ee!

Da poco meno di un anno anche un italia Ã¨ sbarcata http://twilio.com[Twilio], compagnia americana che offre servizi telefonici in cloud 
tramite l'uso di semplici api. La semplicita d'uso delle sue api consente agevolmente di gestire servizi vocali e 
di messaggistica direttamente integrabili in applicazioni pre-esistenti.
Non serve avere server voip dedicato, basta avere un indirizzo pubblico raggiungibile dai
server twilio, crerare un account e iniziare a sperimentare.
L'account gratuito consente di scegliere un numero telefonico della numerazione italiana, permette
di abilitare un numero pre-esistente per testare l'interazione coi servizi twilio.
Le api per utilizzare i servizi twilio, scariucabili gratuitamente da 
https://github.com/twilio[twilio@github], sono manutenute dalla societa' e coprono i principali linguaggi di programmazione 
tra cui java.

Cosa vedrete in questo articolo

. Come funziona twilio
. Come usate le api java twilio e twiliofaces
. Come verificare il vs twiml  e come testare le vs applicazioni

== twilio in breve

Quando qualcuno chiama il vs numero, twilio effettua una chiamata al link che avete configurato nella sezione numeri 
del vs dashboard. Twilio effettua una request post o get (a seconda di come configurato) all'url (che puo' 
essere http/https con o senza username/password, trasmettendo una serie di parametri (vd questo link per maggiori 
informazioni).
La ns applicazione deve produrre TwiML (un dialetto xml - le cui regole sono descritte qui) contenente una serie 
di "istruzioni" (chiamati verbi - l'intero set di verbi/parametri e' descritto nella coumentazione twilio.) che 
dicono a twilio cosa fare, ad esempio:

- http://www.twilio.com/docs/api/2010-04-01/twiml/hangup[rifiutare una chiamata]:
....
<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Hangup/>
</Response>
....
- http://www.twilio.com/docs/api/twiml/play[suonare un mp3]:
....
<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Play loop="10">https://api.twilio.com/cowbell.mp3</Play>
</Response>
....
- http://www.twilio.com/docs/api/2010-04-01/twiml/gather[richiedere l'inserimento di numeri]:
....
<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Gather timeout="10" finishOnKey="*">
        <Say>Please enter your pin number and then press star.</Say>
    </Gather>
</Response>
....
- http://www.twilio.com/docs/api/twiml/record[registrare una chiamata]:
....
<?xml version="1.0" encoding="UTF-8"?>
<Response>
    <Record timeout="10" transcribe="true" />
</Response>
....

== per iniziare:

. Create un nuovo account twilio: https://www.twilio.com/try-twilio
. Scegliete un numero di telefono e fornite un vs numero con il quale farete le chiamate di test (twilio permette di effettuare e ricevere chiamate soltanto verso/da un numero verificato)
. Per creare un applicazione con le api twilio, dovete copiare dalla dashboard:
.. Account Sid
.. App SID
.. Auth Token

=== Creiamo un progetto Maven e aggiungiamo twilio.sdk e twiliofaces tra le dipendenze del pom.xml

----
...
<dependencies>
  <dependency>
   	<groupId>com.twilio.sdk</groupId>
	<artifactId>twilio-java-sdk</artifactId>
	<version>${twilio.sdk.version}</version>
	<scope>compile</scope>
  </dependency>
  <dependency>
	<groupId>org.twiliofaces</groupId>
	<artifactId>twiliofaces</artifactId>
	<version>${twiliofaces.version}</version>
	<scope>compile</scope>
  </dependency>
</dependencies>
...
----

Di seguito vedremo quali vantaggi si hanno nell'utilizzare twiliofaces, invece della libreria java twilio-sdk.


== Come generare twiml usando twilio-sdk ed usando twiliofaces tramite tag jsf

*caso d'uso1: hangup*

Immaginiamo di aver configurato il nostro numero per rifiutare tutte le chiamate che riceviamo.
Usando twilio-sdk, generiamo la index.jsp:

----
<%@ page import="it.ictgroup.test.TwimlGenerator" %>
<%@page contentType="text/xml" %>
<%=	TwimlGenerator.hangup(); %>
----
ed il nostro TwimlGenerator:

----
package it.ictgroup.test;

import com.twilio.sdk.verbs.*;

public class TwimlGenerator {

	public static String hangup(){
	    TwiMLResponse response = new TwiMLResponse();
            try {
	       Hangup hangup = new Hangup();
	       response.append(hangup);
            } catch (TwiMLException e) {
               e.printStackTrace();
            }
            return(response.toXML());
      }
}
----

Bene utilizzando twiliofaces, basta:

- aggiungere un file faces-config.xml

----
<?xml version="1.0" encoding="UTF-8"?>
<faces-config
    xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_1.xsd"
    version="2.1">
</faces-config>
----

- creare la pagina index.xhtml:

----

<?xml version="1.0" encoding="UTF-8"?>
<f:view xmlns="http://www.w3c.org/1999/xhtml"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:tf="http://twiliofaces.org/twiliofaces">
	<tf:response>
		<tf:hangup />
	</tf:response>
</f:view>

----

Non e' piu' semplice?

==


Tutto parte da qui: se in jsf si produce xhtml usando facelets e tag jsf, perche' non fare la stessa cosa con twilio?

== Come creare jsf Controller con @TwilioScope

Un controller in jsf/cdi ha un ciclo di vita che spazia dalla request/sessione/applicazione. Nel caso di twilio e' 
comodo avere dei controller che vivono perl'intera telefonata.
ogni telefoanata ha un suo CallSid (identificativo unico di chiamata) e alla fine di ogni chiamata twilio ci notifica
tutte le infomazioni su un link callback link.

== Cosa manca a twiliofaces

manca il twilio client javascript in tag jsf e api piu fluenti sia per sms che per effettuare le chiamate.

